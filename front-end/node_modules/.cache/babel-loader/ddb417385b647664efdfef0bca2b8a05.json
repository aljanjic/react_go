{"ast":null,"code":"var _jsxFileName = \"/home/aljani/projects/react_go/front-end_last/front-end/src/components/GenresFunc.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GenresFunc(props) {\n  _s();\n\n  const [genres, setGenres] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(\"http://localhost:4000/v1/genres\").then(response => {\n      if (response.status !== 200) {\n        setError(\"Invalid response code: \", response.status);\n      } else {\n        setError(null);\n      }\n\n      return response.json();\n    }).then(json => {\n      setGenres(json.genres);\n    }, []);\n  });\n\n  if (error !== null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Genres\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-group\",\n      children: genres.map(m => /*#__PURE__*/_jsxDEV(Link, {\n        className: \"list-group-item list-group-item-action\",\n        to: {\n          pathname: `/genre/${m.id}`,\n          genreName: m.genre_name\n        },\n        children: m.genre_name\n      }, m.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GenresFunc, \"bT1BBTZ8OrZu4/Dpfp5anTdbrRk=\");\n\n_c = GenresFunc;\nexport default GenresFunc;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenresFunc\");","map":{"version":3,"sources":["/home/aljani/projects/react_go/front-end_last/front-end/src/components/GenresFunc.js"],"names":["React","useEffect","useState","Fragment","Link","GenresFunc","props","genres","setGenres","error","setError","fetch","then","response","status","json","message","map","m","pathname","id","genreName","genre_name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,QAApC,QAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAc;AACpB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzBJ,QAAAA,QAAQ,CAAC,yBAAD,EAA4BG,QAAQ,CAACC,MAArC,CAAR;AACH,OAFD,MAEO;AACHJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACG,aAAOG,QAAQ,CAACE,IAAT,EAAP;AACH,KARD,EASCH,IATD,CASOG,IAAD,IAAU;AACZP,MAAAA,SAAS,CAACO,IAAI,CAACR,MAAN,CAAT;AACH,KAXD,EAWG,EAXH;AAYH,GAbQ,CAAT;;AAeA,MAAIE,KAAK,KAAK,IAAd,EAAoB;AAChB,wBAAO;AAAA,4BAAaA,KAAK,CAACO,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI,QAAC,QAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBACGT,MAAM,CAACU,GAAP,CAAYC,CAAD,iBACV,QAAC,IAAD;AAEE,QAAA,SAAS,EAAC,wCAFZ;AAGE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAG,UAASD,CAAC,CAACE,EAAG,EADvB;AAEFC,UAAAA,SAAS,EAAEH,CAAC,CAACI;AAFX,SAHN;AAAA,kBAQGJ,CAAC,CAACI;AARL,SACOJ,CAAC,CAACE,EADT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GA1CQf,U;;KAAAA,U;AA4CT,eAAeA,UAAf","sourcesContent":["import React, {useEffect, useState, Fragment} from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction GenresFunc(props) {\n    const [genres, setGenres] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetch(\"http://localhost:4000/v1/genres\")\n        .then((response) => {\n        if (response.status !== 200) {\n            setError(\"Invalid response code: \", response.status);\n        } else {\n            setError(null);\n        }\n            return response.json();\n        })\n        .then((json) => {\n            setGenres(json.genres);\n        }, []);\n    })\n\n    if (error !== null) {\n        return <div>Error: {error.message}</div>\n    }\n    return (\n        <Fragment>\n          <h2>Genres</h2>\n\n          <div className=\"list-group\">\n            {genres.map((m) => (\n              <Link\n                key={m.id}\n                className=\"list-group-item list-group-item-action\"\n                to={{\n                  pathname: `/genre/${m.id}`,\n                  genreName: m.genre_name,\n                }}\n              >\n                {m.genre_name}\n              </Link>\n            ))}\n          </div>\n        </Fragment>\n    );\n}\n\nexport default GenresFunc;"]},"metadata":{},"sourceType":"module"}